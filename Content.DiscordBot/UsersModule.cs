using Content.Server.Database;
using Discord;
using Discord.Interactions;
using Discord.WebSocket;
using Robust.Shared.IoC;
using Robust.Shared.Log;
using Robust.Shared.Maths;
using Robust.Shared.Network;
using Color = Robust.Shared.Maths.Color;

namespace Content.DiscordBot;

public sealed partial class UsersModule : InteractionModuleBase<SocketInteractionContext>
{
    [Dependency] private readonly IServerDbManager _db = default!;
    public static readonly ISawmill Log = LogHelper.GetLogger("discord.users_module");

    public override void BeforeExecute(ICommandInfo command)
    {
        DiscordIoC.InjectDependencies(this);
    }

    [SlashCommand("–ø—Ä–∏–≤—è–∑–∞—Ç—å", "–ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Discord –∫ –∞–∫–∫–∞—É–Ω—Ç—É SS14")]
    [RequireContext(ContextType.Guild)]
    public async Task VerifyCommand(string verificationCode)
    {
        var player = await _db.VerifyDiscordVerificationCode(verificationCode);

        if (player == null)
        {
            await RespondAsync("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", ephemeral: true);
            return;
        }

        await _db.LinkDiscord(new NetUserId((Guid) player), Context.User.Id);
        await RespondAsync("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç Discord —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!", ephemeral: true);
    }

    [SlashCommand("–ø—Ä–∏–∑–≤–∞—Ç—å", "–ü—Ä–∏–∑–æ–≤–∏—Ç–µ –∏–≥—Ä–æ–∫–∞")]
    [RequireContext(ContextType.Guild)]
    [RequireUserPermission(GuildPermission.MentionEveryone)]
    public async Task SummonCommand(string ckey)
    {
        var player = await _db.GetPlayerRecordByUserName(ckey);

        if (player == null)
        {
            await RespondAsync("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º CKey –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", ephemeral: true);
            return;
        }

        if (player.DiscordId == null)
        {
            await RespondAsync("‚ùó –£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å Discord", ephemeral: true);
            return;
        }

        await RespondAsync($"üëâ <@!{player.DiscordId}>");
    }

    [SlashCommand("–ø–æ–ª—É—á–∏—Ç—å-ckey", "–£–∑–Ω–∞—Ç—å CKey –∏–≥—Ä–æ–∫–∞")]
    [RequireContext(ContextType.Guild)]
    [RequireBotPermission(GuildPermission.MentionEveryone)]
    public async Task GetCKey(SocketGuildUser user)
    {
        var player = await _db.GetPlayerRecordByDiscordId(user.Id);

        if (player == null)
        {
            await RespondAsync("‚ùó –£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å Space Station 14", ephemeral: true);
            return;
        }

        await RespondAsync($"> CKey –∏–≥—Ä–æ–∫–∞: {player.LastSeenUserName}", ephemeral: true);
    }

    [SlashCommand("–≤—ã–¥–∞—Ç—å-—Å–ø–æ–Ω—Å–æ—Ä–∞", "–í—ã–¥–∞—Ç—å –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ –∏–≥—Ä–æ–∫—É")]
    [RequireContext(ContextType.Group)]
    [RequireUserPermission(GuildPermission.Administrator)]
    public async Task PromoteSponsor(string ckey)
    {
        var player = await _db.GetPlayerRecordByUserName(ckey);

        if (player == null)
        {
            await RespondAsync("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º CKey –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", ephemeral: true);
            return;
        }

        await _db.PromoteSponsor(player.UserId);
        await RespondAsync($"‚úÖ –ü—Ä–∏–≤–µ–ª–µ–≥–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –∏–≥—Ä–æ–∫—É `{ckey}`!", ephemeral: true);
    }

    [SlashCommand("–∑–∞–±—Ä–∞—Ç—å-—Å–ø–æ–Ω—Å–æ—Ä–∞", "–ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ —É –∏–≥—Ä–æ–∫–∞")]
    [RequireContext(ContextType.Group)]
    [RequireUserPermission(GuildPermission.Administrator)]
    public async Task UnpromoteSponsor(string ckey)
    {
        var player = await _db.GetPlayerRecordByUserName(ckey);

        if (player == null)
        {
            await RespondAsync("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º CKey –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", ephemeral: true);
            return;
        }

        await _db.UnpromoteSponsor(player.UserId);
        await RespondAsync($"‚úÖ –ü—Ä–∏–≤–µ–ª–µ–≥–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∏ –∑–∞–±—Ä–∞–Ω—ã —É –∏–≥—Ä–æ–∫–∞ `{ckey}`!", ephemeral: true);
    }

    public static readonly Dictionary<string, Color> OOCColorsDict = new()
    {
        { "red", Color.Red },
        { "orange", Color.Orange },
        { "yellow", Color.Yellow },
        { "green", Color.Green },
        { "blue", Color.Blue },
        { "purple", Color.Purple },
    };

    [SlashCommand("—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å-—Ü–≤–µ—Ç-ooc", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Å–≤–æ–µ–≥–æ OOC (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!)")]
    [RequireContext(ContextType.Guild)]
    public async Task SetPremiumOOCColor(string color)
    {
        var player = await _db.GetPlayerRecordByDiscordId(Context.User.Id);

        if (player == null || !player.IsPremium)
        {
            await RespondAsync("‚ùó –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–ø–æ–Ω—Å–æ—Ä–æ–º!", ephemeral: true);
            return;
        }

        if (!OOCColorsDict.TryGetValue(color, out var selectedColor))
        {
            var colors = string.Join(",\n> ", OOCColorsDict.Keys);
            await RespondAsync($"‚ùó –ë—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:\n> {colors}", ephemeral: true);
            return;
        }

        await _db.SetPremiumOOCColor(player.UserId, selectedColor.ToHex());
        await RespondAsync("> –ù–æ–≤—ã–π —Ü–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.", ephemeral: true);
    }
}
